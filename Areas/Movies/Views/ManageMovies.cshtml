@{
    ViewData["Title"] = "Manage Movies";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["HideCarousel"] = true;
}
@using ratingsflex.Areas.Movies.Models
@*@model List<MovieItem>*@
@model ManageMoviesViewModel


<div class="manage-movies-container">
    @if (TempData["Notification"] != null)
    {
        <div class="alert alert-info">
            @TempData["Notification"]
        </div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="manage-movies-header">
        <h1>Manage Movies</h1>
        
    </div>
    <div class="manage-movies-list">
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("UploadMovie", "Movies")'">Upload Movie File</button>
        <button type="button" class="btn btn-danger" onclick="location.href='@Url.Action("ManageFiles", "Movies")'">Delete Movie File</button>
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("AddMovie", "Movies")'">Add Movie</button>
        <label>Filter by Genre:</label>
        <select>
            <option value="All">All</option>
            <option value="Action">Action</option>
            <option value="Comedy">Comedy</option>
            <option value="Drama">Drama</option>
            <option value="Adventure">Adventure</option>
            <option value="Animation">Animation</option>
            <option value="Biography">Biography</option>
            <option value="Crime">Crime</option>
            <option value="Family">Family</option>
            <option value="Documentary">Documentary</option>
            <option value="Horror">Horror</option>
            <option value="Musical">Musical</option>
            <option value="Mystery">Mystery</option>
            <option value="Romance">Romance</option>
            <option value="Sci-Fi">Sci-Fi</option>
            <option value="Sport">Sport</option>
            <option value="Thriller">Thriller</option>
            <option value="War">War</option>
            <option value="Western">Western</option>
        </select>

        <label>Filter by Rating:</label>
            <select name="rating">
                <option value="0">All</option>
                <option value="9">9+</option>
                <option value="8">8+</option>
                <option value="7">7+</option>
                <option value="6">6+</option>
                <option value="5">5+</option>
                <option value="4">4+</option>
                <option value="3">3+</option>
                <option value="2">2+</option>
                <option value="1">1+</option>
            </select>

    </div>


    <div class="manage-movies-list">
        @if (Model.Movies != null && Model.Movies.Count > 0)
        {
            foreach (var movie in Model.Movies)
            {
                <div class="manage-movies-item">
                    <img data-src="@movie.PosterPath" alt="Movie Poster" />
                    <div class="manage-movies-item-content">
                        <h5 class="card-title">@movie.Title</h5>
                        <p class="card-text">@movie.Description</p>
                        <p class="card-text">Release Date: @movie.ReleaseTime</p>
                        <p class="card-text">Genre: @movie.Genre</p>
                        <p class="card-text">Rating: @movie.Rating</p>
                        <div class="manage-movies-item-actions">
                            <a href="#" class="btn btn-primary">Edit</a>
                            <button data-movie-id="@movie.MovieId" data-release-time="@movie.ReleaseTime" class="btn btn-danger delete-movie">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No movies found!</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var deleteButtons = document.querySelectorAll('.delete-movie');
            deleteButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    var movieId = this.getAttribute('data-movie-id');
                    var releaseTime = this.getAttribute('data-release-time');
                    console.log('movieId:', movieId);
                    console.log('releaseTime:', releaseTime);

                    if (confirm('Are you sure you want to delete this movie?')) {
                        var token = document.getElementsByName("__RequestVerificationToken")[0].value;
                        console.log('token:', token);

                        var formData = new URLSearchParams();
                        formData.append('movieId', movieId);
                        formData.append('releaseTime', releaseTime);

                        console.log('URL:', '@Url.Action("DeleteMovie", "Movies")');

                        fetch('@Url.Action("DeleteMovie", "Movies")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': token
                            },
                            body: formData
                        })
                            .then(response => response.json())
                            .then(data => {
                                console.log('data:', data);
                                if (data.success) {
                                    alert(data.message);
                                    location.reload();
                                } else {
                                    alert(data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error deleting movie:', error);
                                alert('Failed to delete movie. Please try again.');
                            });
                    }
                });
            });

            // Lazy loading images
            const images = document.querySelectorAll('img[data-src]');
            const options = {
                threshold: 0.5
            };

            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.getAttribute('data-src');
                        observer.unobserve(img);
                    }
                });
            }, options);

            images.forEach(img => {
                observer.observe(img);
            });
        });
    </script>
}


